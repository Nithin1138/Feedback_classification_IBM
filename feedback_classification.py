# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1chYxaBVJjTAajoY76mxVl6L37nNzbfjH
"""

# Install required libraries (if needed)
# !pip install pandas

import pandas as pd

# Sample CSV simulation: create or load feedback data
data = {
    'feedback': [
        "The classroom fans don’t work properly and it's too hot.",
        "Our lab has all the required equipment.",
        "Some subjects are not taught in enough detail.",
        "The admin staff is not very responsive to queries.",
        "The Wi-Fi in the library is very weak.",
        "Lectures are always engaging and useful."
    ]
}

df = pd.DataFrame(data)

# Few-shot prompt template
prompt_template = """
Classify the following feedback into one of the categories: Academics, Facilities, or Administration.

Example 1:
Feedback: "The library is well-equipped but the AC never works."
Category: Facilities

Example 2:
Feedback: "Teachers are knowledgeable but some subjects are not explained clearly."
Category: Academics

Example 3:
Feedback: "The admission office delayed my documents."
Category: Administration

Now classify:
Feedback: "{}"
Category:
"""

# Simulated model classification (replace this with actual API response)
def mock_model_response(feedback):
    feedback_lower = feedback.lower()
    if any(word in feedback_lower for word in ['fan', 'ac', 'lab', 'wifi', 'classroom', 'equipment']):
        return 'Facilities'
    elif any(word in feedback_lower for word in ['teacher', 'subject', 'lecture', 'taught']):
        return 'Academics'
    elif any(word in feedback_lower for word in ['admin', 'admission', 'office', 'staff']):
        return 'Administration'
    else:
        return 'Unknown'

# Apply classification
df['category'] = df['feedback'].apply(mock_model_response)

# Display the final results
print("Classified Feedback:")
print(df)

# Export to CSV
df.to_csv("classified_feedback.csv", index=False)
print("\nExported to 'classified_feedback.csv'")

from google.colab import files
import pandas as pd

print("Please upload a CSV file with a column named 'feedback'")
uploaded = files.upload()

filename = list(uploaded.keys())[0]

df = pd.read_csv(filename)
if 'feedback' not in df.columns:
    raise ValueError("Error: CSV must contain a 'feedback' column.")

print("\n✅ Sample Feedback Loaded:")
print(df['feedback'].head())

prompt_template = """
Classify the following feedback into one of the categories: Academics, Facilities, or Administration.

Example 1:
Feedback: "The library is well-equipped but the AC never works."
Category: Facilities

Example 2:
Feedback: "Teachers are knowledgeable but some subjects are not explained clearly."
Category: Academics

Example 3:
Feedback: "The admission office delayed my documents."
Category: Administration

Now classify:
Feedback: "{}"
Category:
"""
def classify_feedback(feedback):
    feedback = str(feedback).lower()

    academics_keywords = [
        "professor", "teaching", "teacher", "lecture", "subject", "curriculum",
        "content", "syllabus", "research", "course", "student council",
        "counseling", "industry", "registration process", "learning", "study"
    ]

    facilities_keywords = [
        "hostel", "room", "wifi", "internet", "cafeteria", "food", "fan", "ac",
        "ventilation", "gym", "equipment", "sports", "medical", "parking", "library",
        "clean", "well-maintained", "extracurricular", "infrastructure"
    ]

    admin_keywords = [
        "admin", "administration", "staff", "office", "fee", "portal", "process",
        "payment", "alumni", "support", "communication", "documents", "user-friendly",
        "response", "management"
    ]


    def contains_keywords(text, keywords):
        return any(kw in text for kw in keywords)

    if contains_keywords(feedback, facilities_keywords):
        return 'Facilities'
    elif contains_keywords(feedback, academics_keywords):
        return 'Academics'
    elif contains_keywords(feedback, admin_keywords):
        return 'Administration'
    else:
        return 'Unknown'




df['category'] = df['feedback'].apply(classify_feedback)

print("\n✅ Classified Feedback:")
print(df)

output_file = "classified_feedback.csv"
df.to_csv(output_file, index=False)
print(f"\n✅ Result saved as '{output_file}'")

files.download(output_file)